# Momentum strategy (with TMA with stop loss)
# This strategy uses only marker order
#data 5

library(PerformanceAnalytics)
library(quantmod)
source("~/backtester_v5.7/backtester_v5.7/framework/backtester.R")



getOrders <- function(store, newRowList, currentPos, info, params) {
  allzero  <- rep(0,length(newRowList)) # used for initializing vectors
  pos <- allzero
 
  if (is.null(store))
    store <- initStore(newRowList)  
  else
    store <- updateStore(store, newRowList)  
 

  if (store$iter > params$lookbacks$long) {  
    for(i in params$series){
      if(i != 0){
        TMA_List <- getTMA(store$cl[[i]], params$lookbacks)  #return a list
        CurrentClose <- last(store$cl[[i]])
        pos[params$series[i]] <- getPosSignFromTMA(TMA_List) * getPosSize(prices,info,CurrentClose)
       
      }
     
    }
  }
 
  marketOrders <- -currentPos + pos

 
  return(list(store=store,marketOrders=marketOrders,
              limitOrders1=allzero,limitPrices1=allzero,
              limitOrders2=allzero,limitPrices2=allzero))
}

checkE01 <- function(prices, lookbacks) {
  na <- c(names(lookbacks))
  if ("short" %in% na & "medium" %in% na & "long" %in% na){
    return(FALSE)
  }
  # Return FALSE if lookbacks contains named elements short, medium, and long
  # otherwise return TRUE to indicate an error
  TRUE
}
checkE02 <- function(prices, lookbacks) {
  if(is.integer(lookbacks$short) & is.integer(lookbacks$medium) & is.integer(lookbacks$long)){
    return(FALSE)
  }
  # Return FALSE if all the elements of lookbacks are integers (as in the R
  # data type) otherwise return TRUE to indicate an error
  TRUE
}
checkE03 <- function(prices, lookbacks) {
  if (lookbacks$short < lookbacks$medium && lookbacks$medium < lookbacks$long){
    return(FALSE)
  }
  # Return FALSE if lookbacks$short < lookbacks$medium < lookbacks$long
  # otherwise return TRUE to indicate an error
  TRUE
}
checkE04 <- function(prices, lookbacks) {
  if (is.xts(prices)){
    return(FALSE)
  }
  # Return FALSE if prices is an xts object, otherwise return TRUE to
  # indicate an error
  TRUE
}
checkE05 <- function(prices, lookbacks) {
  if (nrow(prices) >= as.numeric(lookbacks$long)){
    return(FALSE)
  }
  # Return FALSE if prices has enough rows to getTMA otherwise return TRUE
  # to indicate an error
  TRUE
}
checkE06 <- function(prices, lookbacks) {
  pn <- c(names(prices))
  if ("Close" %in% pn){
    return(FALSE)
  }
  # Return FALSE if prices contains a column called "Close" otherwise return
  # TRUE to indicate an error
  TRUE
}
###############################################################################
# You should not edit allChecks

atLeastOneError <- function(prices, lookbacks) {
  # return TRUE if any of the error checks return TRUE
  ret <- FALSE
  ret <- ret | checkE01(prices,lookbacks)
  ret <- ret | checkE02(prices,lookbacks)
  ret <- ret | checkE03(prices,lookbacks)
  ret <- ret | checkE04(prices,lookbacks)
  ret <- ret | checkE05(prices,lookbacks)
  ret <- ret | checkE06(prices,lookbacks)
  return(ret)
}

###############################################################################

getTMA <- function(prices, lookbacks, with_checks=FALSE) {
 
  # prices and lookbacks should pass (return FALSE) when used with
  # the 6 checks, as tested in the following call to allChecks that
  # you should not edit
  if (with_checks)
    if (atLeastOneError(close_prices, lookbacks))
      stop('At least one of the errors E01...E06 occured')
 
 
  ret = list(short = 0, medium = 0, long = 0)
  for (i in 1 : length(lookbacks)){
   
    #calculate SMA for each lookbacks
    sma <- SMA(prices$Close, n = lookbacks[[i]])
    ret [i] = as.numeric(sma[length(sma)])
   
   
  }
  # You need to replace the assignment to ret so that the returned object:
  #    - is a list
  #    - has the right names (short, medium, long), and
  #    - contains numeric and not xts objects
  #    - and contains the correct moving average values, which should
  #      have windows of the correct sizes that all end in the
  #      same period, be the last row of prices
 
  return(ret)
}

getPosSignFromTMA <- function(tma_list) {
 
  if (tma_list[[1]] != 'NA' && tma_list[[2]] != 'NA' && tma_list[[3]] != 'NA'){
    if (tma_list$short < tma_list$medium && tma_list$medium < tma_list$long){
      return(-1)
    }
    else if (tma_list$short > tma_list$medium && tma_list$medium > tma_list$long){
      return(1)
    }else{
      return(0)
    }
  }
}

getPrices <- function(prevRow, curRow, nextRow = NULL) {
  # these are the three prices we need
  # nextOp-curOp is the pnl for today
  # curOp-prevCl is used to compute slippage
  prevCl     <- as.numeric(prevRow["Close"])
  curOp     <- as.numeric(curRow["Open"])
  curHi     <- as.numeric(curRow["High"])
  curLo     <- as.numeric(curRow["Low"])
  nextOp     <- as.numeric(nextRow["Open"])
  prices     <- list(prevCl = prevCl,
                     curOp = curOp,
                     curHi = curHi,
                     curLo = curLo,
                     nextOp = nextOp)
 
  return(prices)
}

# we use kelly formula to set position size
getPosSize <- function(store,info,CurrentClose) {
 
  pnlResult <- findPnL(rows, oldPos, marketOrder=marketOrder,limitOrder1=allzero,
                      limitPrice1=allzero,
                      limitOrder2=allzero,
                      limitPrice2=allzero,
                      balance=info$balance,
                      sMult=0.2)
    rows <-list(params$series[i]store)
    rows <- getPrices(rows$prev, rows$cur, rows$nxt)
  oldPos <- last(pos[i])
 
  traday=0
  winday=0
  losday=0
  tradeProfit=0
  tradeLoss=0
 
  mompnl <- pnlResult$pnl
  if (  mompnl  != 0){ traday <- traday+1
  if (  mompnl  > 0){
    winday <- winday+1
    tradeProfit <- tradeProfit +  mompnl }
  else if ( mompnl < 0){
    losday <- losday+1
    tradeLoss <- tradeLoss +  mompnl}}
  winPro <- winday/traday
  losPro <- 1-winPro
  Rratio <-  tradeProfit/abs(tradeLoss)
    print(losPro)
  fraction <-0.33
  #keRatio <- KellyRatio(R, Rf = 0, method = "half")
  KeRatio <- (winPro - (losPro/Rratio))
  kePos <- floor(keRatio*info$balance/CurrentClose)
  return(fraction*KePos)
}


# getStopLoss <- function(){
#  
#   lossratio = 0.10
#   highest_price = max(close price)(from day 1 to day i); lowest price = min(close price)(from day 1 to day i)
#   max stop loss price = (1-0.1) * highest price
#   min stop loss price = (1+0.1) * lowest price
# }

initClStore  <- function(newRowList) {
  clStore <- lapply(newRowList, function(x) x$Close)  
  return(clStore)
}
updateClStore <- function(clStore, newRowList) {
  clStore <- mapply(function(x,y) rbind(x,y$Close),clStore,newRowList,SIMPLIFY=FALSE)
  return(clStore)  
}
initStore <- function(newRowList,series) {
  return(list(iter=1,cl=initClStore(newRowList)))
}
updateStore <- function(store, newRowList) {
  store$iter <- store$iter + 1
  store$cl <- updateClStore(store$cl,newRowList)
  # store$o <- updateOpStore(store$o,newRowList,series,store$iter)
  # store$h <- updateHiStore(store$h,newRowList,series,store$iter)
  # store$l <- updateLoStore(store$l,newRowList,series,store$iter)
  # store$v <- updateVoStore(store$v,newRowList,series,store$iter)
  return(store)
  return(store)  
}

rows <- list()
initRows  <- function(newRowList) {
  Rows <- lapply(newRowList, function(x), x)  
  return(clStore)
}

initClStore  <- function(newRowList) {
  clStore <- lapply(newRowList, function(x) x$Close)  
  return(clStore)
}
updateClStore <- function(clStore, newRowList) {
  clStore <- mapply(function(x,y) rbind(x,y$Close),clStore,newRowList,SIMPLIFY=FALSE)
  return(clStore)  
}
initStore <- function(newRowList,series) {
  return(list(iter=1,cl=initClStore(newRowList)))
}
updateStore <- function(store, newRowList) {
  store$iter <- store$iter + 1
  store$cl <- updateClStore(store$cl,newRowList)
  # store$o <- updateOpStore(store$o,newRowList,series,store$iter)
  # store$h <- updateHiStore(store$h,newRowList,series,store$iter)
  # store$l <- updateLoStore(store$l,newRowList,series,store$iter)
  # store$v <- updateVoStore(store$v,newRowList,series,store$iter)
  return(store)
  return(store)  
}
